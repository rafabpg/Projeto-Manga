generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  email  String  @unique
  name   String
  lastname   String?
  username   String @unique
  password String
  role    Role   @default(USER)
}
model Manga{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  description   String?
  capaURL  String  @unique
  published Boolean  @default(false)
  status Status  @default(Ongoing)
  author String? 
  cloudinary_id String? @unique
  categories CategoriesOnManga[]
  chapters Chapter[]
}
model Chapter{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  volume Int 
  description String?
  images String[] @unique
  capa_url String @unique
  manga  Manga @relation(fields: [mangaId], references: [id])
  mangaId Int
 
}
// cloudinary.v2.uploader.upload("https://upload.wikimedia.org/wikipedia/commons/a/ae/Olympic_flag.jpg",
//   { public_id: "olympic_flag" }, 
//   function(error, result) {console.log(result); });
model Image {
  id       String @default(cuid()) @id
  publicId String @unique
  format   String
  version  String
}


model Category{
  id Int @id @default(autoincrement())
  name String @unique
  mangas CategoriesOnManga[]
}

model CategoriesOnManga{
  manga       Manga     @relation(fields: [mangaId], references: [id])
  mangaId     Int 
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int 

  @@id([mangaId, categoryId])
}



enum Role {
  USER
  ADMIN
}
enum Status {
  Ongoing
  Finished
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
